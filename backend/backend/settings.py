"""
Django settings for backend project.

Generated by "django-admin startproject" using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import environ
from opensearchpy import OpenSearch
import sentry_sdk

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env(BASE_DIR.parent.joinpath(".env"))

BASE_URL = env("BASE_URL", default="/")
BASE_API_URL = env("BASE_API_URL", default="/api/v1/")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-v43m&qf7fgev$srbsem*_1^@((g6^wsft@4%jhc9bks1@)ov=("

# SECURITY WARNING: don"t run with debug turned on in production!
DEBUG = env("DEBUG", default="false").lower() == "true"

# TODO: проверить как это повлияет на безопасность и как этого избежать разрешив попап для oauth.telegram.org
SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin-allow-popups"

if DEBUG:
    # ALLOWED_HOSTS = ["localhost", "127.0.0.1"]
    ALLOWED_HOSTS = ["*"]
    SECURE_SSL_REDIRECT = False
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    CSRF_TRUSTED_ORIGINS = ["http://localhost:5173"]
else:
    ALLOWED_HOSTS = ["127.0.0.1", "localhost", "0.0.0.0"] + env("ALLOWED_HOSTS", default="").split(
        ","
    )


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "django_filters",
    "django_extensions",
    "sslserver",
    "recipes",
    "accounts",
    'django_opensearch_dsl',
    'imagekit',
]

MIDDLEWARE = [
    # для логгирования времени запросов
    # "polls.middleware.RequestTimeMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
        "info_file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": "info.log",
        },
        "errors_warnings_file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": "errors_warnings.log",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["errors_warnings_file", "info_file"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

WSGI_APPLICATION = "backend.wsgi.application"

REST_FRAMEWORK = {
    # Use Django"s standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 25,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# if DEBUG:
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }
# else:
DATABASES = {
    "default": {
        # Используется PostgreSQL
        "ENGINE": "django.db.backends.postgresql",
        # Используется PostgreSQL с измененным ENGINE для логгирования времени запросов
        # "ENGINE": "polls",
        # Имя базы данных
        "NAME": env("POSTGRES_DB_NAME"),
        # Имя пользователя
        "USER": env("POSTGRES_USER_NAME"),
        # Пароль пользователя
        "PASSWORD": env("POSTGRES_USER_PASSWORD"),
        # Наименование контейнера для базы данных в Docker Compose или хост к базе данных
        "HOST": env("POSTGRES_HOST", default="127.0.0.1"),
        # Порт базы данных
        "PORT": env("POSTGRES_PORT", default="5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "ru-RU"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.CustomUser"

TELEGRAM_BOT_TOKEN = env("TELEGRAM_BOT_TOKEN", default=None)
VK_TOKEN = env("VK_TOKEN", default=None)

if not DEBUG:
    sentry_sdk.init(
        dsn="https://ea812300c90ef152fcc2f5e2a2d93ae6@o4504513794080768.ingest.us.sentry.io/4508396930400256",
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=1.0,
        _experiments={
            # Set continuous_profiling_auto_start to True
            # to automatically start the profiler on when
            # possible.
            "continuous_profiling_auto_start": True,
        },
    )

OPENSEARCH_URL = env("OPENSEARCH_URL")
OPENSEARCH_DSL = {
    'default': {
        'hosts': OPENSEARCH_URL,
        # TODO: по-хорошему, стоит поменять на отдельные переменные, но впадлу
        'http_auth': (env("POSTGRES_USER_NAME"), env("POSTGRES_USER_PASSWORD")),
        'use_ssl': False,  # Отключите SSL, если используется HTTP
        'verify_certs': False,  # Отключите проверку сертификатов
    },
}

# Подключение к OpenSearch
opensearch_client = OpenSearch(
    hosts=[OPENSEARCH_URL],
    # http_auth=('admin', 'admin'),
    use_ssl=False,
    verify_certs=False,
)

PROXY_API_KEY=env('PROXY_API_KEY', None)